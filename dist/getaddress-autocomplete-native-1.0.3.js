var getAddress = (function (exports) {
    'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var AddressSelectedEvent = /** @class */ (function () {
        function AddressSelectedEvent() {
        }
        AddressSelectedEvent.dispatch = function (element, id, address) {
            var evt = new Event("getaddress-autocomplete-address-selected", { bubbles: true });
            evt["address"] = address;
            evt["id"] = id;
            element.dispatchEvent(evt);
        };
        return AddressSelectedEvent;
    }());
    var AddressSelectedFailedEvent = /** @class */ (function () {
        function AddressSelectedFailedEvent() {
        }
        AddressSelectedFailedEvent.dispatch = function (element, id, status, message) {
            var evt = new Event("getaddress-autocomplete-address-selected-failed", { bubbles: true });
            evt["status"] = status;
            evt["message"] = message;
            evt["id"] = id;
            element.dispatchEvent(evt);
        };
        return AddressSelectedFailedEvent;
    }());
    var SuggestionsEvent = /** @class */ (function () {
        function SuggestionsEvent() {
        }
        SuggestionsEvent.dispatch = function (element, query, suggestions) {
            var evt = new Event("getaddress-autocomplete-suggestions", { bubbles: true });
            evt["suggestions"] = suggestions;
            evt["query"] = query;
            element.dispatchEvent(evt);
        };
        return SuggestionsEvent;
    }());
    var SuggestionsFailedEvent = /** @class */ (function () {
        function SuggestionsFailedEvent() {
        }
        SuggestionsFailedEvent.dispatch = function (element, query, status, message) {
            var evt = new Event("getaddress-autocomplete-suggestions-failed", { bubbles: true });
            evt["status"] = status;
            evt["message"] = message;
            evt["query"] = query;
            element.dispatchEvent(evt);
        };
        return SuggestionsFailedEvent;
    }());

    var Autocomplete = /** @class */ (function () {
        function Autocomplete(input, client, output_fields, attributeValues) {
            var _this = this;
            this.input = input;
            this.client = client;
            this.output_fields = output_fields;
            this.attributeValues = attributeValues;
            this.onInputFocus = function () {
                if (_this.attributeValues.options.select_on_focus) {
                    _this.input.select();
                }
            };
            this.onInputPaste = function () {
                setTimeout(function () { _this.populateList(); }, 100);
            };
            this.onInput = function (e) {
                if ((e instanceof InputEvent == false) && e.target instanceof HTMLInputElement) {
                    var input_1 = e.target;
                    Array.from(_this.list.querySelectorAll("option"))
                        .every(function (o) {
                        if (o.innerText === input_1.value) {
                            _this.handleSuggestionSelected(o);
                            return false;
                        }
                        return true;
                    });
                }
            };
            this.onKeyUp = function (event) {
                _this.debug(event);
                _this.handleKeyUp(event);
            };
            this.onKeyDown = function (event) {
                _this.debug(event);
                _this.handleKeyDownDefault(event);
            };
            this.debug = function (data) {
                if (_this.attributeValues.options.debug) {
                    console.log(data);
                }
            };
            this.handleComponentBlur = function (force) {
                if (force === void 0) { force = false; }
                clearTimeout(_this.blurTimer);
                var delay = force ? 0 : 100;
                _this.blurTimer = setTimeout(function () {
                    _this.clearList();
                }, delay);
            };
            this.handleSuggestionSelected = function (suggestion) { return __awaiter$1(_this, void 0, void 0, function () {
                var id, addressResult, success, failed;
                return __generator$1(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this.attributeValues.options.enable_get) return [3 /*break*/, 1];
                            this.clearList();
                            return [3 /*break*/, 3];
                        case 1:
                            this.input.value = '';
                            if (this.attributeValues.options.clear_list_on_select) {
                                this.clearList();
                            }
                            id = suggestion.dataset.id;
                            return [4 /*yield*/, this.client.get(id)];
                        case 2:
                            addressResult = _a.sent();
                            if (addressResult.isSuccess) {
                                success = addressResult.toSuccess();
                                this.bind(success.address);
                                AddressSelectedEvent.dispatch(this.input, id, success.address);
                                if (this.attributeValues.options.input_focus_on_select) {
                                    this.input.focus();
                                    this.input.setSelectionRange(this.input.value.length, this.input.value.length + 1);
                                }
                            }
                            else {
                                failed = addressResult.toFailed();
                                AddressSelectedFailedEvent.dispatch(this.input, id, failed.status, failed.message);
                            }
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            this.bind = function (address) {
                if (address && _this.attributeValues.options.bind_output_fields) {
                    _this.setOutputfield(_this.output_fields.building_name, address.building_name);
                    _this.setOutputfield(_this.output_fields.building_number, address.building_number);
                    _this.setOutputfield(_this.output_fields.latitude, address.latitude.toString());
                    _this.setOutputfield(_this.output_fields.longitude, address.longitude.toString());
                    _this.setOutputfield(_this.output_fields.line_1, address.line_1);
                    _this.setOutputfield(_this.output_fields.line_2, address.line_2);
                    _this.setOutputfield(_this.output_fields.line_3, address.line_3);
                    _this.setOutputfield(_this.output_fields.line_4, address.line_4);
                    _this.setOutputfield(_this.output_fields.country, address.country);
                    _this.setOutputfield(_this.output_fields.county, address.county);
                    _this.setOutputfield(_this.output_fields.formatted_address_0, address.formatted_address[0]);
                    _this.setOutputfield(_this.output_fields.formatted_address_1, address.formatted_address[1]);
                    _this.setOutputfield(_this.output_fields.formatted_address_2, address.formatted_address[2]);
                    _this.setOutputfield(_this.output_fields.formatted_address_3, address.formatted_address[3]);
                    _this.setOutputfield(_this.output_fields.formatted_address_4, address.formatted_address[4]);
                    _this.setOutputfield(_this.output_fields.town_or_city, address.town_or_city);
                    _this.setOutputfield(_this.output_fields.locality, address.locality);
                    _this.setOutputfield(_this.output_fields.district, address.district);
                    _this.setOutputfield(_this.output_fields.residential, address.residential.toString());
                    _this.setOutputfield(_this.output_fields.sub_building_name, address.sub_building_name);
                    _this.setOutputfield(_this.output_fields.sub_building_number, address.sub_building_number);
                    _this.setOutputfield(_this.output_fields.thoroughfare, address.thoroughfare);
                    _this.setOutputfield(_this.output_fields.postcode, address.postcode);
                }
            };
            this.setOutputfield = function (fieldName, fieldValue) {
                if (!fieldName) {
                    return;
                }
                var element = document.getElementById(fieldName);
                if (!element) {
                    element = document.querySelector(fieldName);
                }
                if (element) {
                    if (element instanceof HTMLInputElement) {
                        element.value = fieldValue;
                    }
                    else {
                        element.innerText = fieldValue;
                    }
                }
                return element;
            };
            this.handleKeyDownDefault = function (event) {
                var isPrintableKey = event.key && (event.key.length === 1 || event.key === 'Unidentified');
                if (isPrintableKey) {
                    clearTimeout(_this.filterTimer);
                    _this.filterTimer = setTimeout(function () {
                        if (_this.input.value.length >= _this.attributeValues.options.minimum_characters) {
                            _this.populateList();
                        }
                        else {
                            _this.clearList();
                        }
                    }, _this.attributeValues.options.delay);
                }
            };
            this.handleKeyUp = function (event) {
                if (event.code === 'Backspace' || event.code === 'Delete') {
                    if (event) {
                        var target = event.target;
                        if (target == _this.input) {
                            if (_this.input.value.length < _this.attributeValues.options.minimum_characters) {
                                _this.clearList();
                            }
                            else {
                                _this.populateList();
                            }
                        }
                    }
                }
            };
            this.populateList = function () { return __awaiter$1(_this, void 0, void 0, function () {
                var autocompleteOptions, query, result, success, newItems, i, li, failed;
                var _a;
                var _b;
                return __generator$1(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            autocompleteOptions = {
                                all: true,
                                top: this.attributeValues.options.suggestion_count,
                                template: "{formatted_address}{postcode,, }{postcode}"
                            };
                            if (this.attributeValues.options.filter) {
                                autocompleteOptions.filter = this.attributeValues.options.filter;
                            }
                            query = (_b = this.input.value) === null || _b === void 0 ? void 0 : _b.trim();
                            return [4 /*yield*/, this.client.autocomplete(query, autocompleteOptions)];
                        case 1:
                            result = _c.sent();
                            if (result.isSuccess) {
                                success = result.toSuccess();
                                newItems = [];
                                if (success.suggestions.length) {
                                    for (i = 0; i < success.suggestions.length; i++) {
                                        li = this.getListItem(success.suggestions[i]);
                                        newItems.push(li);
                                    }
                                    (_a = this.list).replaceChildren.apply(_a, newItems);
                                }
                                else {
                                    this.clearList();
                                }
                                SuggestionsEvent.dispatch(this.input, query, success.suggestions);
                            }
                            else {
                                failed = result.toFailed();
                                SuggestionsFailedEvent.dispatch(this.input, query, failed.status, failed.message);
                            }
                            return [2 /*return*/];
                    }
                });
            }); };
            this.clearList = function () {
                var _a;
                (_a = _this.list).replaceChildren.apply(_a, []);
            };
            this.getListItem = function (suggestion) {
                var option = document.createElement('OPTION');
                var address = suggestion.address;
                option.innerText = address;
                option.dataset.id = suggestion.id;
                return option;
            };
        }
        Autocomplete.prototype.destroy = function () {
            this.destroyInput();
            this.destroyList();
        };
        Autocomplete.prototype.destroyList = function () {
            this.list.remove();
        };
        Autocomplete.prototype.destroyInput = function () {
            this.input.removeAttribute('list');
            this.input.removeEventListener('focus', this.onInputFocus);
            this.input.removeEventListener('paste', this.onInputPaste);
            this.input.removeEventListener('keydown', this.onKeyDown);
            this.input.removeEventListener('keyup', this.onKeyUp);
            this.input.removeEventListener('input', this.onInput);
        };
        Autocomplete.prototype.build = function () {
            this.input.setAttribute('list', "".concat(this.attributeValues.listId));
            this.input.addEventListener('focus', this.onInputFocus);
            this.input.addEventListener('paste', this.onInputPaste);
            this.input.addEventListener('keydown', this.onKeyDown);
            this.input.addEventListener('keyup', this.onKeyUp);
            this.input.addEventListener('input', this.onInput);
            this.list = document.createElement('DATALIST');
            this.list.id = this.attributeValues.listId;
            this.input.insertAdjacentElement("afterend", this.list);
        };
        return Autocomplete;
    }());

    var Options = /** @class */ (function () {
        function Options(options) {
            if (options === void 0) { options = {}; }
            this.id_prefix = "getAddress-autocomplete-native";
            this.output_fields = undefined;
            this.delay = 200;
            this.minimum_characters = 2;
            this.clear_list_on_select = true;
            this.select_on_focus = true;
            this.alt_autocomplete_url = undefined;
            this.alt_get_url = undefined;
            this.suggestion_count = 6;
            this.filter = undefined;
            this.bind_output_fields = true;
            this.input_focus_on_select = true;
            this.debug = false;
            this.enable_get = true;
            this.set_default_output_field_names = true;
            for (var prop in options) {
                if (options.hasOwnProperty(prop) && typeof options[prop] !== 'undefined') {
                    this[prop] = options[prop];
                }
            }
        }
        return Options;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    var Result = /** @class */ (function () {
        function Result(isSuccess) {
            this.isSuccess = isSuccess;
        }
        return Result;
    }());
    var Success = /** @class */ (function (_super) {
        __extends(Success, _super);
        function Success() {
            return _super.call(this, true) || this;
        }
        return Success;
    }(Result));
    var AutocompleteSuccess = /** @class */ (function (_super) {
        __extends(AutocompleteSuccess, _super);
        function AutocompleteSuccess(suggestions) {
            var _this = _super.call(this) || this;
            _this.suggestions = suggestions;
            return _this;
        }
        AutocompleteSuccess.prototype.toSuccess = function () {
            return this;
        };
        AutocompleteSuccess.prototype.toFailed = function () {
            throw new Error('Did not fail');
        };
        return AutocompleteSuccess;
    }(Success));
    var LocationSuccess = /** @class */ (function (_super) {
        __extends(LocationSuccess, _super);
        function LocationSuccess(suggestions) {
            var _this = _super.call(this) || this;
            _this.suggestions = suggestions;
            return _this;
        }
        LocationSuccess.prototype.toSuccess = function () {
            return this;
        };
        LocationSuccess.prototype.toFailed = function () {
            throw new Error('Did not fail');
        };
        return LocationSuccess;
    }(Success));
    var GetSuccess = /** @class */ (function (_super) {
        __extends(GetSuccess, _super);
        function GetSuccess(address) {
            var _this = _super.call(this) || this;
            _this.address = address;
            return _this;
        }
        GetSuccess.prototype.toSuccess = function () {
            return this;
        };
        GetSuccess.prototype.toFailed = function () {
            throw new Error('Did not fail');
        };
        return GetSuccess;
    }(Success));
    var GetLocationSuccess = /** @class */ (function (_super) {
        __extends(GetLocationSuccess, _super);
        function GetLocationSuccess(location) {
            var _this = _super.call(this) || this;
            _this.location = location;
            return _this;
        }
        GetLocationSuccess.prototype.toSuccess = function () {
            return this;
        };
        GetLocationSuccess.prototype.toFailed = function () {
            throw new Error('Did not fail');
        };
        return GetLocationSuccess;
    }(Success));
    var GetLocationFailed = /** @class */ (function (_super) {
        __extends(GetLocationFailed, _super);
        function GetLocationFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        GetLocationFailed.prototype.toSuccess = function () {
            throw new Error('Not a success');
        };
        GetLocationFailed.prototype.toFailed = function () {
            return this;
        };
        return GetLocationFailed;
    }(Result));
    var AutocompleteFailed = /** @class */ (function (_super) {
        __extends(AutocompleteFailed, _super);
        function AutocompleteFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        AutocompleteFailed.prototype.toSuccess = function () {
            throw new Error('Not a success');
        };
        AutocompleteFailed.prototype.toFailed = function () {
            return this;
        };
        return AutocompleteFailed;
    }(Result));
    var LocationFailed = /** @class */ (function (_super) {
        __extends(LocationFailed, _super);
        function LocationFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        LocationFailed.prototype.toSuccess = function () {
            throw new Error('Not a success');
        };
        LocationFailed.prototype.toFailed = function () {
            return this;
        };
        return LocationFailed;
    }(Result));
    var GetFailed = /** @class */ (function (_super) {
        __extends(GetFailed, _super);
        function GetFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        GetFailed.prototype.toSuccess = function () {
            throw new Error('Not a success');
        };
        GetFailed.prototype.toFailed = function () {
            return this;
        };
        return GetFailed;
    }(Result));
    var FindSuccess = /** @class */ (function (_super) {
        __extends(FindSuccess, _super);
        function FindSuccess(addresses) {
            var _this = _super.call(this) || this;
            _this.addresses = addresses;
            return _this;
        }
        FindSuccess.prototype.toSuccess = function () {
            return this;
        };
        FindSuccess.prototype.toFailed = function () {
            throw new Error('failed');
        };
        return FindSuccess;
    }(Success));
    var FindFailed = /** @class */ (function (_super) {
        __extends(FindFailed, _super);
        function FindFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        FindFailed.prototype.toSuccess = function () {
            throw new Error('failed');
        };
        FindFailed.prototype.toFailed = function () {
            return this;
        };
        return FindFailed;
    }(Result));
    var TypeaheadSuccess = /** @class */ (function (_super) {
        __extends(TypeaheadSuccess, _super);
        function TypeaheadSuccess(results) {
            var _this = _super.call(this) || this;
            _this.results = results;
            return _this;
        }
        TypeaheadSuccess.prototype.toSuccess = function () {
            return this;
        };
        TypeaheadSuccess.prototype.toFailed = function () {
            throw new Error('failed');
        };
        return TypeaheadSuccess;
    }(Success));
    var TypeaheadFailed = /** @class */ (function (_super) {
        __extends(TypeaheadFailed, _super);
        function TypeaheadFailed(status, message) {
            var _this = _super.call(this, false) || this;
            _this.status = status;
            _this.message = message;
            return _this;
        }
        TypeaheadFailed.prototype.toSuccess = function () {
            throw new Error('failed');
        };
        TypeaheadFailed.prototype.toFailed = function () {
            return this;
        };
        return TypeaheadFailed;
    }(Result));

    var Client = /** @class */ (function () {
        function Client(api_key, autocomplete_url, get_url, location_url, get_location_url, typeahead_url) {
            if (autocomplete_url === void 0) { autocomplete_url = 'https://api.getaddress.io/autocomplete/{query}'; }
            if (get_url === void 0) { get_url = 'https://api.getaddress.io/get/{id}'; }
            if (location_url === void 0) { location_url = 'https://api.getaddress.io/location/{query}'; }
            if (get_location_url === void 0) { get_location_url = 'https://api.getaddress.io/get-location/{id}'; }
            if (typeahead_url === void 0) { typeahead_url = 'https://api.getaddress.io/typeahead/{term}'; }
            this.api_key = api_key;
            this.autocomplete_url = autocomplete_url;
            this.get_url = get_url;
            this.location_url = location_url;
            this.get_location_url = get_location_url;
            this.typeahead_url = typeahead_url;
            this.autocompleteResponse = undefined;
            this.getResponse = undefined;
            this.locationResponse = undefined;
            this.getLocationResponse = undefined;
            this.typeaheadResponse = undefined;
            this.autocompleteAbortController = new AbortController();
            this.getAbortController = new AbortController();
            this.typeaheadAbortController = new AbortController();
            this.locationAbortController = new AbortController();
            this.getLocationAbortController = new AbortController();
        }
        Client.prototype.location = function (query, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var combinedOptions, url, _a, json_1, suggestions, json, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, 6, 7]);
                            combinedOptions = __assign({ all: true }, options);
                            url = this.location_url.replace(/{query}/i, query);
                            if (this.api_key) {
                                if (url.includes('?')) {
                                    url = "".concat(url, "&api-key=").concat(this.api_key);
                                }
                                else {
                                    url = "".concat(url, "?api-key=").concat(this.api_key);
                                }
                            }
                            if (this.locationResponse !== undefined) {
                                this.locationResponse = undefined;
                                this.locationAbortController.abort();
                                this.locationAbortController = new AbortController();
                            }
                            _a = this;
                            return [4 /*yield*/, fetch(url, {
                                    method: 'post',
                                    signal: this.locationAbortController.signal,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(combinedOptions),
                                })];
                        case 1:
                            _a.locationResponse = _b.sent();
                            if (!(this.locationResponse.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.locationResponse.json()];
                        case 2:
                            json_1 = _b.sent();
                            suggestions = json_1.suggestions;
                            return [2 /*return*/, new LocationSuccess(suggestions)];
                        case 3: return [4 /*yield*/, this.locationResponse.json()];
                        case 4:
                            json = _b.sent();
                            return [2 /*return*/, new LocationFailed(this.locationResponse.status, json.Message)];
                        case 5:
                            err_1 = _b.sent();
                            if (err_1 instanceof Error) {
                                if (err_1.name === 'AbortError') {
                                    return [2 /*return*/, new LocationSuccess([])];
                                }
                                return [2 /*return*/, new LocationFailed(401, err_1.message)];
                            }
                            return [2 /*return*/, new LocationFailed(401, 'Unauthorised')];
                        case 6:
                            this.locationResponse = undefined;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.getLocation = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var url, _a, json_2, loaction, json, err_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, 6, 7]);
                            url = this.get_location_url.replace(/{id}/i, id);
                            if (this.api_key) {
                                if (url.includes('?')) {
                                    url = "".concat(url, "&api-key=").concat(this.api_key);
                                }
                                else {
                                    url = "".concat(url, "?api-key=").concat(this.api_key);
                                }
                            }
                            if (this.getLocationResponse !== undefined) {
                                this.getResponse = undefined;
                                this.getAbortController.abort();
                                this.getAbortController = new AbortController();
                            }
                            _a = this;
                            return [4 /*yield*/, fetch(url, {
                                    method: 'get',
                                    signal: this.getAbortController.signal,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                })];
                        case 1:
                            _a.getResponse = _b.sent();
                            if (!(this.getResponse.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getResponse.json()];
                        case 2:
                            json_2 = _b.sent();
                            loaction = json_2;
                            return [2 /*return*/, new GetLocationSuccess(loaction)];
                        case 3: return [4 /*yield*/, this.getResponse.json()];
                        case 4:
                            json = _b.sent();
                            return [2 /*return*/, new GetLocationFailed(this.getResponse.status, json.Message)];
                        case 5:
                            err_2 = _b.sent();
                            if (err_2 instanceof Error) {
                                return [2 /*return*/, new GetLocationFailed(401, err_2.message)];
                            }
                            return [2 /*return*/, new GetLocationFailed(401, 'Unauthorised')];
                        case 6:
                            this.getResponse = undefined;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.autocomplete = function (query, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var combinedOptions, url, _a, json_3, suggestions, json, err_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, 6, 7]);
                            combinedOptions = __assign({ all: true }, options);
                            url = this.autocomplete_url.replace(/{query}/i, query);
                            if (this.api_key) {
                                if (url.includes('?')) {
                                    url = "".concat(url, "&api-key=").concat(this.api_key);
                                }
                                else {
                                    url = "".concat(url, "?api-key=").concat(this.api_key);
                                }
                            }
                            if (this.autocompleteResponse !== undefined) {
                                this.autocompleteResponse = undefined;
                                this.autocompleteAbortController.abort();
                                this.autocompleteAbortController = new AbortController();
                            }
                            _a = this;
                            return [4 /*yield*/, fetch(url, {
                                    method: 'post',
                                    signal: this.autocompleteAbortController.signal,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(combinedOptions),
                                })];
                        case 1:
                            _a.autocompleteResponse = _b.sent();
                            if (!(this.autocompleteResponse.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.autocompleteResponse.json()];
                        case 2:
                            json_3 = _b.sent();
                            suggestions = json_3.suggestions;
                            return [2 /*return*/, new AutocompleteSuccess(suggestions)];
                        case 3: return [4 /*yield*/, this.autocompleteResponse.json()];
                        case 4:
                            json = _b.sent();
                            return [2 /*return*/, new AutocompleteFailed(this.autocompleteResponse.status, json.Message)];
                        case 5:
                            err_3 = _b.sent();
                            if (err_3 instanceof Error) {
                                if (err_3.name === 'AbortError') {
                                    return [2 /*return*/, new AutocompleteSuccess([])];
                                }
                                return [2 /*return*/, new AutocompleteFailed(401, err_3.message)];
                            }
                            return [2 /*return*/, new AutocompleteFailed(401, 'Unauthorised')];
                        case 6:
                            this.autocompleteResponse = undefined;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.get = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var url, _a, json_4, address, json, err_4;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, 6, 7]);
                            url = this.get_url.replace(/{id}/i, id);
                            if (this.api_key) {
                                if (url.includes('?')) {
                                    url = "".concat(url, "&api-key=").concat(this.api_key);
                                }
                                else {
                                    url = "".concat(url, "?api-key=").concat(this.api_key);
                                }
                            }
                            if (this.getResponse !== undefined) {
                                this.getResponse = undefined;
                                this.getAbortController.abort();
                                this.getAbortController = new AbortController();
                            }
                            _a = this;
                            return [4 /*yield*/, fetch(url, {
                                    method: 'get',
                                    signal: this.getAbortController.signal,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                })];
                        case 1:
                            _a.getResponse = _b.sent();
                            if (!(this.getResponse.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.getResponse.json()];
                        case 2:
                            json_4 = _b.sent();
                            address = json_4;
                            return [2 /*return*/, new GetSuccess(address)];
                        case 3: return [4 /*yield*/, this.getResponse.json()];
                        case 4:
                            json = _b.sent();
                            return [2 /*return*/, new GetFailed(this.getResponse.status, json.Message)];
                        case 5:
                            err_4 = _b.sent();
                            if (err_4 instanceof Error) {
                                return [2 /*return*/, new GetFailed(401, err_4.message)];
                            }
                            return [2 /*return*/, new GetFailed(401, 'Unauthorised')];
                        case 6:
                            this.getResponse = undefined;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.find = function (postcode) {
            return __awaiter(this, void 0, void 0, function () {
                var response, json_5, addresses, json, err_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 5, , 6]);
                            return [4 /*yield*/, fetch("https://api.getaddress.io/find/".concat(postcode, "?api-key=").concat(this.api_key, "&expand=true"))];
                        case 1:
                            response = _a.sent();
                            if (!(response.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, response.json()];
                        case 2:
                            json_5 = _a.sent();
                            addresses = json_5;
                            return [2 /*return*/, new FindSuccess(addresses)];
                        case 3: return [4 /*yield*/, response.json()];
                        case 4:
                            json = _a.sent();
                            return [2 /*return*/, new FindFailed(response.status, json.Message)];
                        case 5:
                            err_5 = _a.sent();
                            if (err_5 instanceof Error) {
                                return [2 /*return*/, new FindFailed(401, err_5.message)];
                            }
                            return [2 /*return*/, new FindFailed(401, 'Unauthorised')];
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        Client.prototype.typeahead = function (term, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(this, void 0, void 0, function () {
                var url, _a, json_6, results, json, err_6;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _b.trys.push([0, 5, 6, 7]);
                            url = this.typeahead_url.replace(/{term}/i, term);
                            if (this.api_key) {
                                if (url.includes('?')) {
                                    url = "".concat(url, "&api-key=").concat(this.api_key);
                                }
                                else {
                                    url = "".concat(url, "?api-key=").concat(this.api_key);
                                }
                            }
                            if (this.typeaheadResponse !== undefined) {
                                this.typeaheadResponse = undefined;
                                this.typeaheadAbortController.abort();
                                this.typeaheadAbortController = new AbortController();
                            }
                            _a = this;
                            return [4 /*yield*/, fetch(url, {
                                    method: 'post',
                                    signal: this.autocompleteAbortController.signal,
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify(options),
                                })];
                        case 1:
                            _a.typeaheadResponse = _b.sent();
                            if (!(this.typeaheadResponse.status === 200)) return [3 /*break*/, 3];
                            return [4 /*yield*/, this.typeaheadResponse.json()];
                        case 2:
                            json_6 = _b.sent();
                            results = json_6;
                            return [2 /*return*/, new TypeaheadSuccess(results)];
                        case 3: return [4 /*yield*/, this.typeaheadResponse.json()];
                        case 4:
                            json = _b.sent();
                            return [2 /*return*/, new TypeaheadFailed(this.typeaheadResponse.status, json.Message)];
                        case 5:
                            err_6 = _b.sent();
                            if (err_6 instanceof Error) {
                                if (err_6.name === 'AbortError') {
                                    return [2 /*return*/, new TypeaheadSuccess([])];
                                }
                                return [2 /*return*/, new TypeaheadFailed(401, err_6.message)];
                            }
                            return [2 /*return*/, new TypeaheadFailed(401, 'Unauthorised')];
                        case 6:
                            this.typeaheadResponse = undefined;
                            return [7 /*endfinally*/];
                        case 7: return [2 /*return*/];
                    }
                });
            });
        };
        return Client;
    }());

    var OutputFields = /** @class */ (function () {
        function OutputFields(outputFields, setDefaults) {
            if (outputFields === void 0) { outputFields = {}; }
            if (setDefaults) {
                this.setDefaultValues();
            }
            for (var prop in outputFields) {
                if (outputFields.hasOwnProperty(prop) && typeof outputFields[prop] !== 'undefined') {
                    this[prop] = outputFields[prop];
                }
            }
        }
        OutputFields.prototype.setDefaultValues = function () {
            this.formatted_address_0 = "";
            this.formatted_address_1 = "formatted_address_1";
            this.formatted_address_2 = "formatted_address_2";
            this.formatted_address_3 = "formatted_address_3";
            this.formatted_address_4 = "formatted_address_4";
            this.line_1 = "line_1";
            this.line_2 = "line_2";
            this.line_3 = "line_3";
            this.line_4 = "line_4";
            this.town_or_city = "town_or_city";
            this.county = "county";
            this.country = "country";
            this.postcode = "postcode";
            this.latitude = "latitude";
            this.longitude = "longitude";
            this.building_number = "building_number";
            this.building_name = "building_name";
            this.sub_building_number = "sub_building_number";
            this.sub_building_name = "sub_building_name";
            this.thoroughfare = 'thoroughfare';
            this.locality = "locality";
            this.district = "district";
            this.residential = "residential";
        };
        return OutputFields;
    }());

    var AttributeValues = /** @class */ (function () {
        function AttributeValues(options, index) {
            this.options = options;
            var suffix = "";
            if (index > 0) {
                suffix = "-".concat(index);
            }
            this.id_prefix = options.id_prefix;
            this.listId = "".concat(this.id_prefix, "-list").concat(suffix);
        }
        return AttributeValues;
    }());

    var InstanceCounter = /** @class */ (function () {
        function InstanceCounter() {
        }
        InstanceCounter.add = function (autocomplete) {
            this.instances.push(autocomplete);
        };
        InstanceCounter.instances = [];
        return InstanceCounter;
    }());
    function autocomplete(id, api_key, options) {
        if (!id) {
            return;
        }
        var allOptions = new Options(options);
        var textbox = document.getElementById(id);
        if (!textbox) {
            textbox = document.querySelector(id);
        }
        if (!textbox) {
            return;
        }
        var client = new Client(api_key, allOptions.alt_autocomplete_url, allOptions.alt_get_url);
        var outputFields = new OutputFields(allOptions.output_fields, allOptions.set_default_output_field_names);
        if (!outputFields.formatted_address_0) {
            outputFields.formatted_address_0 = id;
        }
        var index = InstanceCounter.instances.length;
        var attributeValues = new AttributeValues(allOptions, index);
        var autocomplete = new Autocomplete(textbox, client, outputFields, attributeValues);
        autocomplete.build();
        InstanceCounter.add(autocomplete);
    }
    function destroy() {
        for (var _i = 0, _a = InstanceCounter.instances; _i < _a.length; _i++) {
            var instance = _a[_i];
            instance.destroy();
        }
        InstanceCounter.instances = [];
    }

    exports.autocomplete = autocomplete;
    exports.destroy = destroy;

    Object.defineProperty(exports, '__esModule', { value: true });

    return exports;

})({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
